// WARNING: This file has automatically been generated
// Code generated by https://git.io/c-for-go. DO NOT EDIT.

package ixml

/*
#cgo LDFLAGS: -Wl,--export-dynamic -Wl,--unresolved-symbols=ignore-in-object-files
#cgo CFLAGS: -DNVML_NO_UNVERSIONED_FUNC_DEFS=1
#include "api.h"
#include <stdlib.h>
#include "cgo_helpers.h"
*/
import "C"
import (
	"runtime"
	"unsafe"
)

// nvmlInit function as declared in ixml/api.h:707
func nvmlInit() Return {
	__ret := C.nvmlInit_v2()
	__v := (Return)(__ret)
	return __v
}

// nvmlShutdown function as declared in ixml/api.h:724
func nvmlShutdown() Return {
	__ret := C.nvmlShutdown()
	__v := (Return)(__ret)
	return __v
}

// nvmlDeviceGetCount function as declared in ixml/api.h:746
func nvmlDeviceGetCount(DeviceCount *uint32) Return {
	cDeviceCount, cDeviceCountAllocMap := (*C.uint)(unsafe.Pointer(DeviceCount)), cgoAllocsUnknown
	__ret := C.nvmlDeviceGetCount_v2(cDeviceCount)
	runtime.KeepAlive(cDeviceCountAllocMap)
	__v := (Return)(__ret)
	return __v
}

// nvmlDeviceGetHandleByIndex function as declared in ixml/api.h:794
func nvmlDeviceGetHandleByIndex(Index uint32, Device *Device) Return {
	cIndex, cIndexAllocMap := (C.uint)(Index), cgoAllocsUnknown
	cDevice, cDeviceAllocMap := (*C.nvmlDevice_t)(unsafe.Pointer(Device)), cgoAllocsUnknown
	__ret := C.nvmlDeviceGetHandleByIndex_v2(cIndex, cDevice)
	runtime.KeepAlive(cDeviceAllocMap)
	runtime.KeepAlive(cIndexAllocMap)
	__v := (Return)(__ret)
	return __v
}

// nvmlDeviceGetHandleByUUID function as declared in ixml/api.h:819
func nvmlDeviceGetHandleByUUID(Uuid string, Device *Device) Return {
	cUuid, cUuidAllocMap := unpackPCharString(Uuid)
	cDevice, cDeviceAllocMap := (*C.nvmlDevice_t)(unsafe.Pointer(Device)), cgoAllocsUnknown
	__ret := C.nvmlDeviceGetHandleByUUID(cUuid, cDevice)
	runtime.KeepAlive(cDeviceAllocMap)
	runtime.KeepAlive(cUuidAllocMap)
	__v := (Return)(__ret)
	return __v
}

// nvmlDeviceGetHandleByPciBusId_v2 function as declared in ixml/api.h:849
func nvmlDeviceGetHandleByPciBusId_v2(PciBusId string, Device *Device) Return {
	cPciBusId, cPciBusIdAllocMap := unpackPCharString(PciBusId)
	cDevice, cDeviceAllocMap := (*C.nvmlDevice_t)(unsafe.Pointer(Device)), cgoAllocsUnknown
	__ret := C.nvmlDeviceGetHandleByPciBusId_v2(cPciBusId, cDevice)
	runtime.KeepAlive(cDeviceAllocMap)
	runtime.KeepAlive(cPciBusIdAllocMap)
	__v := (Return)(__ret)
	return __v
}

// nvmlDeviceGetMinorNumber function as declared in ixml/api.h:868
func nvmlDeviceGetMinorNumber(Device Device, MinorNumber *uint32) Return {
	cDevice, cDeviceAllocMap := *(*C.nvmlDevice_t)(unsafe.Pointer(&Device)), cgoAllocsUnknown
	cMinorNumber, cMinorNumberAllocMap := (*C.uint)(unsafe.Pointer(MinorNumber)), cgoAllocsUnknown
	__ret := C.nvmlDeviceGetMinorNumber(cDevice, cMinorNumber)
	runtime.KeepAlive(cMinorNumberAllocMap)
	runtime.KeepAlive(cDeviceAllocMap)
	__v := (Return)(__ret)
	return __v
}

// nvmlDeviceGetUUID function as declared in ixml/api.h:896
func nvmlDeviceGetUUID(Device Device, Uuid *byte, Length uint32) Return {
	cDevice, cDeviceAllocMap := *(*C.nvmlDevice_t)(unsafe.Pointer(&Device)), cgoAllocsUnknown
	cUuid, cUuidAllocMap := (*C.char)(unsafe.Pointer(Uuid)), cgoAllocsUnknown
	cLength, cLengthAllocMap := (C.uint)(Length), cgoAllocsUnknown
	__ret := C.nvmlDeviceGetUUID(cDevice, cUuid, cLength)
	runtime.KeepAlive(cLengthAllocMap)
	runtime.KeepAlive(cUuidAllocMap)
	runtime.KeepAlive(cDeviceAllocMap)
	__v := (Return)(__ret)
	return __v
}

// nvmlDeviceGetName function as declared in ixml/api.h:922
func nvmlDeviceGetName(Device Device, Name *byte, Length uint32) Return {
	cDevice, cDeviceAllocMap := *(*C.nvmlDevice_t)(unsafe.Pointer(&Device)), cgoAllocsUnknown
	cName, cNameAllocMap := (*C.char)(unsafe.Pointer(Name)), cgoAllocsUnknown
	cLength, cLengthAllocMap := (C.uint)(Length), cgoAllocsUnknown
	__ret := C.nvmlDeviceGetName(cDevice, cName, cLength)
	runtime.KeepAlive(cLengthAllocMap)
	runtime.KeepAlive(cNameAllocMap)
	runtime.KeepAlive(cDeviceAllocMap)
	__v := (Return)(__ret)
	return __v
}

// nvmlSystemGetDriverVersion function as declared in ixml/api.h:941
func nvmlSystemGetDriverVersion(Version *byte, Length uint32) Return {
	cVersion, cVersionAllocMap := (*C.char)(unsafe.Pointer(Version)), cgoAllocsUnknown
	cLength, cLengthAllocMap := (C.uint)(Length), cgoAllocsUnknown
	__ret := C.nvmlSystemGetDriverVersion(cVersion, cLength)
	runtime.KeepAlive(cLengthAllocMap)
	runtime.KeepAlive(cVersionAllocMap)
	__v := (Return)(__ret)
	return __v
}

// nvmlSystemGetNVMLVersion function as declared in ixml/api.h:959
func nvmlSystemGetNVMLVersion(Version *byte, Length uint32) Return {
	cVersion, cVersionAllocMap := (*C.char)(unsafe.Pointer(Version)), cgoAllocsUnknown
	cLength, cLengthAllocMap := (C.uint)(Length), cgoAllocsUnknown
	__ret := C.nvmlSystemGetNVMLVersion(cVersion, cLength)
	runtime.KeepAlive(cLengthAllocMap)
	runtime.KeepAlive(cVersionAllocMap)
	__v := (Return)(__ret)
	return __v
}

// nvmlSystemGetCudaDriverVersion function as declared in ixml/api.h:975
func nvmlSystemGetCudaDriverVersion(CudaDriverVersion *int32) Return {
	cCudaDriverVersion, cCudaDriverVersionAllocMap := (*C.int)(unsafe.Pointer(CudaDriverVersion)), cgoAllocsUnknown
	__ret := C.nvmlSystemGetCudaDriverVersion(cCudaDriverVersion)
	runtime.KeepAlive(cCudaDriverVersionAllocMap)
	__v := (Return)(__ret)
	return __v
}

// nvmlSystemGetCudaDriverVersion_v2 function as declared in ixml/api.h:992
func nvmlSystemGetCudaDriverVersion_v2(CudaDriverVersion *int32) Return {
	cCudaDriverVersion, cCudaDriverVersionAllocMap := (*C.int)(unsafe.Pointer(CudaDriverVersion)), cgoAllocsUnknown
	__ret := C.nvmlSystemGetCudaDriverVersion_v2(cCudaDriverVersion)
	runtime.KeepAlive(cCudaDriverVersionAllocMap)
	__v := (Return)(__ret)
	return __v
}

// nvmlDeviceGetTemperature function as declared in ixml/api.h:1013
func nvmlDeviceGetTemperature(Device Device, SensorType TemperatureSensors, Temp *uint32) Return {
	cDevice, cDeviceAllocMap := *(*C.nvmlDevice_t)(unsafe.Pointer(&Device)), cgoAllocsUnknown
	cSensorType, cSensorTypeAllocMap := (C.nvmlTemperatureSensors_t)(SensorType), cgoAllocsUnknown
	cTemp, cTempAllocMap := (*C.uint)(unsafe.Pointer(Temp)), cgoAllocsUnknown
	__ret := C.nvmlDeviceGetTemperature(cDevice, cSensorType, cTemp)
	runtime.KeepAlive(cTempAllocMap)
	runtime.KeepAlive(cSensorTypeAllocMap)
	runtime.KeepAlive(cDeviceAllocMap)
	__v := (Return)(__ret)
	return __v
}

// nvmlDeviceGetTemperatureThreshold function as declared in ixml/api.h:1034
func nvmlDeviceGetTemperatureThreshold(Device Device, ThresholdType TemperatureThresholds, Temp *uint32) Return {
	cDevice, cDeviceAllocMap := *(*C.nvmlDevice_t)(unsafe.Pointer(&Device)), cgoAllocsUnknown
	cThresholdType, cThresholdTypeAllocMap := (C.nvmlTemperatureThresholds_t)(ThresholdType), cgoAllocsUnknown
	cTemp, cTempAllocMap := (*C.uint)(unsafe.Pointer(Temp)), cgoAllocsUnknown
	__ret := C.nvmlDeviceGetTemperatureThreshold(cDevice, cThresholdType, cTemp)
	runtime.KeepAlive(cTempAllocMap)
	runtime.KeepAlive(cThresholdTypeAllocMap)
	runtime.KeepAlive(cDeviceAllocMap)
	__v := (Return)(__ret)
	return __v
}

// nvmlDeviceGetFanSpeed function as declared in ixml/api.h:1060
func nvmlDeviceGetFanSpeed(Device Device, Speed *uint32) Return {
	cDevice, cDeviceAllocMap := *(*C.nvmlDevice_t)(unsafe.Pointer(&Device)), cgoAllocsUnknown
	cSpeed, cSpeedAllocMap := (*C.uint)(unsafe.Pointer(Speed)), cgoAllocsUnknown
	__ret := C.nvmlDeviceGetFanSpeed(cDevice, cSpeed)
	runtime.KeepAlive(cSpeedAllocMap)
	runtime.KeepAlive(cDeviceAllocMap)
	__v := (Return)(__ret)
	return __v
}

// nvmlDeviceGetClockInfo function as declared in ixml/api.h:1081
func nvmlDeviceGetClockInfo(Device Device, _type ClockType, Clock *uint32) Return {
	cDevice, cDeviceAllocMap := *(*C.nvmlDevice_t)(unsafe.Pointer(&Device)), cgoAllocsUnknown
	c_type, c_typeAllocMap := (C.nvmlClockType_t)(_type), cgoAllocsUnknown
	cClock, cClockAllocMap := (*C.uint)(unsafe.Pointer(Clock)), cgoAllocsUnknown
	__ret := C.nvmlDeviceGetClockInfo(cDevice, c_type, cClock)
	runtime.KeepAlive(cClockAllocMap)
	runtime.KeepAlive(c_typeAllocMap)
	runtime.KeepAlive(cDeviceAllocMap)
	__v := (Return)(__ret)
	return __v
}

// nvmlDeviceGetMemoryInfo function as declared in ixml/api.h:1114
func nvmlDeviceGetMemoryInfo(Device Device, Memory *Memory) Return {
	cDevice, cDeviceAllocMap := *(*C.nvmlDevice_t)(unsafe.Pointer(&Device)), cgoAllocsUnknown
	cMemory, cMemoryAllocMap := (*C.nvmlMemory_t)(unsafe.Pointer(Memory)), cgoAllocsUnknown
	__ret := C.nvmlDeviceGetMemoryInfo(cDevice, cMemory)
	runtime.KeepAlive(cMemoryAllocMap)
	runtime.KeepAlive(cDeviceAllocMap)
	__v := (Return)(__ret)
	return __v
}

// nvmlDeviceGetMemoryInfo_v2 function as declared in ixml/api.h:1115
func nvmlDeviceGetMemoryInfo_v2(Device Device, Memory *Memory_v2) Return {
	cDevice, cDeviceAllocMap := *(*C.nvmlDevice_t)(unsafe.Pointer(&Device)), cgoAllocsUnknown
	cMemory, cMemoryAllocMap := (*C.nvmlMemory_v2_t)(unsafe.Pointer(Memory)), cgoAllocsUnknown
	__ret := C.nvmlDeviceGetMemoryInfo_v2(cDevice, cMemory)
	runtime.KeepAlive(cMemoryAllocMap)
	runtime.KeepAlive(cDeviceAllocMap)
	__v := (Return)(__ret)
	return __v
}

// nvmlDeviceGetFanSpeed_v2 function as declared in ixml/api.h:1140
func nvmlDeviceGetFanSpeed_v2(Device Device, Fan uint32, Speed *uint32) Return {
	cDevice, cDeviceAllocMap := *(*C.nvmlDevice_t)(unsafe.Pointer(&Device)), cgoAllocsUnknown
	cFan, cFanAllocMap := (C.uint)(Fan), cgoAllocsUnknown
	cSpeed, cSpeedAllocMap := (*C.uint)(unsafe.Pointer(Speed)), cgoAllocsUnknown
	__ret := C.nvmlDeviceGetFanSpeed_v2(cDevice, cFan, cSpeed)
	runtime.KeepAlive(cSpeedAllocMap)
	runtime.KeepAlive(cFanAllocMap)
	runtime.KeepAlive(cDeviceAllocMap)
	__v := (Return)(__ret)
	return __v
}

// nvmlDeviceGetUtilizationRates function as declared in ixml/api.h:1165
func nvmlDeviceGetUtilizationRates(Device Device, Utilization *Utilization) Return {
	cDevice, cDeviceAllocMap := *(*C.nvmlDevice_t)(unsafe.Pointer(&Device)), cgoAllocsUnknown
	cUtilization, cUtilizationAllocMap := (*C.nvmlUtilization_t)(unsafe.Pointer(Utilization)), cgoAllocsUnknown
	__ret := C.nvmlDeviceGetUtilizationRates(cDevice, cUtilization)
	runtime.KeepAlive(cUtilizationAllocMap)
	runtime.KeepAlive(cDeviceAllocMap)
	__v := (Return)(__ret)
	return __v
}

// nvmlDeviceGetComputeMode function as declared in ixml/api.h:1187
func nvmlDeviceGetComputeMode(Device Device, Mode *ComputeMode) Return {
	cDevice, cDeviceAllocMap := *(*C.nvmlDevice_t)(unsafe.Pointer(&Device)), cgoAllocsUnknown
	cMode, cModeAllocMap := (*C.nvmlComputeMode_t)(unsafe.Pointer(Mode)), cgoAllocsUnknown
	__ret := C.nvmlDeviceGetComputeMode(cDevice, cMode)
	runtime.KeepAlive(cModeAllocMap)
	runtime.KeepAlive(cDeviceAllocMap)
	__v := (Return)(__ret)
	return __v
}

// nvmlDeviceGetCudaComputeCapability function as declared in ixml/api.h:1211
func nvmlDeviceGetCudaComputeCapability(Device Device, Major *int32, Minor *int32) Return {
	cDevice, cDeviceAllocMap := *(*C.nvmlDevice_t)(unsafe.Pointer(&Device)), cgoAllocsUnknown
	cMajor, cMajorAllocMap := (*C.int)(unsafe.Pointer(Major)), cgoAllocsUnknown
	cMinor, cMinorAllocMap := (*C.int)(unsafe.Pointer(Minor)), cgoAllocsUnknown
	__ret := C.nvmlDeviceGetCudaComputeCapability(cDevice, cMajor, cMinor)
	runtime.KeepAlive(cMinorAllocMap)
	runtime.KeepAlive(cMajorAllocMap)
	runtime.KeepAlive(cDeviceAllocMap)
	__v := (Return)(__ret)
	return __v
}

// nvmlDeviceGetEccMode function as declared in ixml/api.h:1239
func nvmlDeviceGetEccMode(Device Device, Current *EnableState, Pending *EnableState) Return {
	cDevice, cDeviceAllocMap := *(*C.nvmlDevice_t)(unsafe.Pointer(&Device)), cgoAllocsUnknown
	cCurrent, cCurrentAllocMap := (*C.nvmlEnableState_t)(unsafe.Pointer(Current)), cgoAllocsUnknown
	cPending, cPendingAllocMap := (*C.nvmlEnableState_t)(unsafe.Pointer(Pending)), cgoAllocsUnknown
	__ret := C.nvmlDeviceGetEccMode(cDevice, cCurrent, cPending)
	runtime.KeepAlive(cPendingAllocMap)
	runtime.KeepAlive(cCurrentAllocMap)
	runtime.KeepAlive(cDeviceAllocMap)
	__v := (Return)(__ret)
	return __v
}

// nvmlDeviceGetDefaultEccMode function as declared in ixml/api.h:1265
func nvmlDeviceGetDefaultEccMode(Device Device, DefaultMode *EnableState) Return {
	cDevice, cDeviceAllocMap := *(*C.nvmlDevice_t)(unsafe.Pointer(&Device)), cgoAllocsUnknown
	cDefaultMode, cDefaultModeAllocMap := (*C.nvmlEnableState_t)(unsafe.Pointer(DefaultMode)), cgoAllocsUnknown
	__ret := C.nvmlDeviceGetDefaultEccMode(cDevice, cDefaultMode)
	runtime.KeepAlive(cDefaultModeAllocMap)
	runtime.KeepAlive(cDeviceAllocMap)
	__v := (Return)(__ret)
	return __v
}

// nvmlDeviceGetBoardId function as declared in ixml/api.h:1290
func nvmlDeviceGetBoardId(Device Device, BoardId *uint32) Return {
	cDevice, cDeviceAllocMap := *(*C.nvmlDevice_t)(unsafe.Pointer(&Device)), cgoAllocsUnknown
	cBoardId, cBoardIdAllocMap := (*C.uint)(unsafe.Pointer(BoardId)), cgoAllocsUnknown
	__ret := C.nvmlDeviceGetBoardId(cDevice, cBoardId)
	runtime.KeepAlive(cBoardIdAllocMap)
	runtime.KeepAlive(cDeviceAllocMap)
	__v := (Return)(__ret)
	return __v
}

// nvmlDeviceGetMultiGpuBoard function as declared in ixml/api.h:1310
func nvmlDeviceGetMultiGpuBoard(Device Device, MultiGpuBool *uint32) Return {
	cDevice, cDeviceAllocMap := *(*C.nvmlDevice_t)(unsafe.Pointer(&Device)), cgoAllocsUnknown
	cMultiGpuBool, cMultiGpuBoolAllocMap := (*C.uint)(unsafe.Pointer(MultiGpuBool)), cgoAllocsUnknown
	__ret := C.nvmlDeviceGetMultiGpuBoard(cDevice, cMultiGpuBool)
	runtime.KeepAlive(cMultiGpuBoolAllocMap)
	runtime.KeepAlive(cDeviceAllocMap)
	__v := (Return)(__ret)
	return __v
}

// nvmlDeviceGetPciInfo function as declared in ixml/api.h:1329
func nvmlDeviceGetPciInfo(Device Device, Pci *PciInfo) Return {
	cDevice, cDeviceAllocMap := *(*C.nvmlDevice_t)(unsafe.Pointer(&Device)), cgoAllocsUnknown
	cPci, cPciAllocMap := (*C.nvmlPciInfo_t)(unsafe.Pointer(Pci)), cgoAllocsUnknown
	__ret := C.nvmlDeviceGetPciInfo_v3(cDevice, cPci)
	runtime.KeepAlive(cPciAllocMap)
	runtime.KeepAlive(cDeviceAllocMap)
	__v := (Return)(__ret)
	return __v
}

// nvmlDeviceGetMaxPcieLinkGeneration function as declared in ixml/api.h:1350
func nvmlDeviceGetMaxPcieLinkGeneration(Device Device, MaxLinkGen *uint32) Return {
	cDevice, cDeviceAllocMap := *(*C.nvmlDevice_t)(unsafe.Pointer(&Device)), cgoAllocsUnknown
	cMaxLinkGen, cMaxLinkGenAllocMap := (*C.uint)(unsafe.Pointer(MaxLinkGen)), cgoAllocsUnknown
	__ret := C.nvmlDeviceGetMaxPcieLinkGeneration(cDevice, cMaxLinkGen)
	runtime.KeepAlive(cMaxLinkGenAllocMap)
	runtime.KeepAlive(cDeviceAllocMap)
	__v := (Return)(__ret)
	return __v
}

// nvmlDeviceGetMaxPcieLinkWidth function as declared in ixml/api.h:1371
func nvmlDeviceGetMaxPcieLinkWidth(Device Device, MaxLinkWidth *uint32) Return {
	cDevice, cDeviceAllocMap := *(*C.nvmlDevice_t)(unsafe.Pointer(&Device)), cgoAllocsUnknown
	cMaxLinkWidth, cMaxLinkWidthAllocMap := (*C.uint)(unsafe.Pointer(MaxLinkWidth)), cgoAllocsUnknown
	__ret := C.nvmlDeviceGetMaxPcieLinkWidth(cDevice, cMaxLinkWidth)
	runtime.KeepAlive(cMaxLinkWidthAllocMap)
	runtime.KeepAlive(cDeviceAllocMap)
	__v := (Return)(__ret)
	return __v
}

// nvmlDeviceGetCurrPcieLinkGeneration function as declared in ixml/api.h:1389
func nvmlDeviceGetCurrPcieLinkGeneration(Device Device, CurrLinkGen *uint32) Return {
	cDevice, cDeviceAllocMap := *(*C.nvmlDevice_t)(unsafe.Pointer(&Device)), cgoAllocsUnknown
	cCurrLinkGen, cCurrLinkGenAllocMap := (*C.uint)(unsafe.Pointer(CurrLinkGen)), cgoAllocsUnknown
	__ret := C.nvmlDeviceGetCurrPcieLinkGeneration(cDevice, cCurrLinkGen)
	runtime.KeepAlive(cCurrLinkGenAllocMap)
	runtime.KeepAlive(cDeviceAllocMap)
	__v := (Return)(__ret)
	return __v
}

// nvmlDeviceGetCurrPcieLinkWidth function as declared in ixml/api.h:1407
func nvmlDeviceGetCurrPcieLinkWidth(Device Device, CurrLinkWidth *uint32) Return {
	cDevice, cDeviceAllocMap := *(*C.nvmlDevice_t)(unsafe.Pointer(&Device)), cgoAllocsUnknown
	cCurrLinkWidth, cCurrLinkWidthAllocMap := (*C.uint)(unsafe.Pointer(CurrLinkWidth)), cgoAllocsUnknown
	__ret := C.nvmlDeviceGetCurrPcieLinkWidth(cDevice, cCurrLinkWidth)
	runtime.KeepAlive(cCurrLinkWidthAllocMap)
	runtime.KeepAlive(cDeviceAllocMap)
	__v := (Return)(__ret)
	return __v
}

// nvmlDeviceGetPcieThroughput function as declared in ixml/api.h:1431
func nvmlDeviceGetPcieThroughput(Device Device, Counter PcieUtilCounter, Value *uint32) Return {
	cDevice, cDeviceAllocMap := *(*C.nvmlDevice_t)(unsafe.Pointer(&Device)), cgoAllocsUnknown
	cCounter, cCounterAllocMap := (C.nvmlPcieUtilCounter_t)(Counter), cgoAllocsUnknown
	cValue, cValueAllocMap := (*C.uint)(unsafe.Pointer(Value)), cgoAllocsUnknown
	__ret := C.nvmlDeviceGetPcieThroughput(cDevice, cCounter, cValue)
	runtime.KeepAlive(cValueAllocMap)
	runtime.KeepAlive(cCounterAllocMap)
	runtime.KeepAlive(cDeviceAllocMap)
	__v := (Return)(__ret)
	return __v
}

// nvmlDeviceGetPcieReplayCounter function as declared in ixml/api.h:1455
func nvmlDeviceGetPcieReplayCounter(Device Device, Value *uint32) Return {
	cDevice, cDeviceAllocMap := *(*C.nvmlDevice_t)(unsafe.Pointer(&Device)), cgoAllocsUnknown
	cValue, cValueAllocMap := (*C.uint)(unsafe.Pointer(Value)), cgoAllocsUnknown
	__ret := C.nvmlDeviceGetPcieReplayCounter(cDevice, cValue)
	runtime.KeepAlive(cValueAllocMap)
	runtime.KeepAlive(cDeviceAllocMap)
	__v := (Return)(__ret)
	return __v
}

// nvmlDeviceGetIndex function as declared in ixml/api.h:1489
func nvmlDeviceGetIndex(Device Device, Index *uint32) Return {
	cDevice, cDeviceAllocMap := *(*C.nvmlDevice_t)(unsafe.Pointer(&Device)), cgoAllocsUnknown
	cIndex, cIndexAllocMap := (*C.uint)(unsafe.Pointer(Index)), cgoAllocsUnknown
	__ret := C.nvmlDeviceGetIndex(cDevice, cIndex)
	runtime.KeepAlive(cIndexAllocMap)
	runtime.KeepAlive(cDeviceAllocMap)
	__v := (Return)(__ret)
	return __v
}

// nvmlDeviceGetSerial function as declared in ixml/api.h:1513
func nvmlDeviceGetSerial(Device Device, Serial *byte, Length uint32) Return {
	cDevice, cDeviceAllocMap := *(*C.nvmlDevice_t)(unsafe.Pointer(&Device)), cgoAllocsUnknown
	cSerial, cSerialAllocMap := (*C.char)(unsafe.Pointer(Serial)), cgoAllocsUnknown
	cLength, cLengthAllocMap := (C.uint)(Length), cgoAllocsUnknown
	__ret := C.nvmlDeviceGetSerial(cDevice, cSerial, cLength)
	runtime.KeepAlive(cLengthAllocMap)
	runtime.KeepAlive(cSerialAllocMap)
	runtime.KeepAlive(cDeviceAllocMap)
	__v := (Return)(__ret)
	return __v
}

// nvmlDeviceGetHandleBySerial function as declared in ixml/api.h:1548
func nvmlDeviceGetHandleBySerial(Serial string, Device *Device) Return {
	cSerial, cSerialAllocMap := unpackPCharString(Serial)
	cDevice, cDeviceAllocMap := (*C.nvmlDevice_t)(unsafe.Pointer(Device)), cgoAllocsUnknown
	__ret := C.nvmlDeviceGetHandleBySerial(cSerial, cDevice)
	runtime.KeepAlive(cDeviceAllocMap)
	runtime.KeepAlive(cSerialAllocMap)
	__v := (Return)(__ret)
	return __v
}

// nvmlDeviceGetVbiosVersion function as declared in ixml/api.h:1570
func nvmlDeviceGetVbiosVersion(Device Device, Version *byte, Length uint32) Return {
	cDevice, cDeviceAllocMap := *(*C.nvmlDevice_t)(unsafe.Pointer(&Device)), cgoAllocsUnknown
	cVersion, cVersionAllocMap := (*C.char)(unsafe.Pointer(Version)), cgoAllocsUnknown
	cLength, cLengthAllocMap := (C.uint)(Length), cgoAllocsUnknown
	__ret := C.nvmlDeviceGetVbiosVersion(cDevice, cVersion, cLength)
	runtime.KeepAlive(cLengthAllocMap)
	runtime.KeepAlive(cVersionAllocMap)
	runtime.KeepAlive(cDeviceAllocMap)
	__v := (Return)(__ret)
	return __v
}

// nvmlDeviceGetBoardPartNumber function as declared in ixml/api.h:1590
func nvmlDeviceGetBoardPartNumber(Device Device, PartNumber *byte, Length uint32) Return {
	cDevice, cDeviceAllocMap := *(*C.nvmlDevice_t)(unsafe.Pointer(&Device)), cgoAllocsUnknown
	cPartNumber, cPartNumberAllocMap := (*C.char)(unsafe.Pointer(PartNumber)), cgoAllocsUnknown
	cLength, cLengthAllocMap := (C.uint)(Length), cgoAllocsUnknown
	__ret := C.nvmlDeviceGetBoardPartNumber(cDevice, cPartNumber, cLength)
	runtime.KeepAlive(cLengthAllocMap)
	runtime.KeepAlive(cPartNumberAllocMap)
	runtime.KeepAlive(cDeviceAllocMap)
	__v := (Return)(__ret)
	return __v
}

// nvmlDeviceSetEccMode function as declared in ixml/api.h:1620
func nvmlDeviceSetEccMode(Device Device, Ecc EnableState) Return {
	cDevice, cDeviceAllocMap := *(*C.nvmlDevice_t)(unsafe.Pointer(&Device)), cgoAllocsUnknown
	cEcc, cEccAllocMap := (C.nvmlEnableState_t)(Ecc), cgoAllocsUnknown
	__ret := C.nvmlDeviceSetEccMode(cDevice, cEcc)
	runtime.KeepAlive(cEccAllocMap)
	runtime.KeepAlive(cDeviceAllocMap)
	__v := (Return)(__ret)
	return __v
}

// nvmlDeviceGetPowerUsage function as declared in ixml/api.h:1696
func nvmlDeviceGetPowerUsage(Device Device, Power *uint32) Return {
	cDevice, cDeviceAllocMap := *(*C.nvmlDevice_t)(unsafe.Pointer(&Device)), cgoAllocsUnknown
	cPower, cPowerAllocMap := (*C.uint)(unsafe.Pointer(Power)), cgoAllocsUnknown
	__ret := C.nvmlDeviceGetPowerUsage(cDevice, cPower)
	runtime.KeepAlive(cPowerAllocMap)
	runtime.KeepAlive(cDeviceAllocMap)
	__v := (Return)(__ret)
	return __v
}

// nvmlDeviceOnSameBoard function as declared in ixml/api.h:1716
func nvmlDeviceOnSameBoard(Device1 Device, Device2 Device, OnSameBoard *int32) Return {
	cDevice1, cDevice1AllocMap := *(*C.nvmlDevice_t)(unsafe.Pointer(&Device1)), cgoAllocsUnknown
	cDevice2, cDevice2AllocMap := *(*C.nvmlDevice_t)(unsafe.Pointer(&Device2)), cgoAllocsUnknown
	cOnSameBoard, cOnSameBoardAllocMap := (*C.int)(unsafe.Pointer(OnSameBoard)), cgoAllocsUnknown
	__ret := C.nvmlDeviceOnSameBoard(cDevice1, cDevice2, cOnSameBoard)
	runtime.KeepAlive(cOnSameBoardAllocMap)
	runtime.KeepAlive(cDevice2AllocMap)
	runtime.KeepAlive(cDevice1AllocMap)
	__v := (Return)(__ret)
	return __v
}

// nvmlDeviceGetComputeRunningProcesses function as declared in ixml/api.h:1759
func nvmlDeviceGetComputeRunningProcesses(Device Device, InfoCount *uint32, Infos *ProcessInfo_v1) Return {
	cDevice, cDeviceAllocMap := *(*C.nvmlDevice_t)(unsafe.Pointer(&Device)), cgoAllocsUnknown
	cInfoCount, cInfoCountAllocMap := (*C.uint)(unsafe.Pointer(InfoCount)), cgoAllocsUnknown
	cInfos, cInfosAllocMap := (*C.nvmlProcessInfo_v1_t)(unsafe.Pointer(Infos)), cgoAllocsUnknown
	__ret := C.nvmlDeviceGetComputeRunningProcesses(cDevice, cInfoCount, cInfos)
	runtime.KeepAlive(cInfosAllocMap)
	runtime.KeepAlive(cInfoCountAllocMap)
	runtime.KeepAlive(cDeviceAllocMap)
	__v := (Return)(__ret)
	return __v
}

// nvmlGpmMetricsGet function as declared in ixml/api.h:1780
func nvmlGpmMetricsGet(MetricsGet *nvmlGpmMetricsGetType) Return {
	cMetricsGet, cMetricsGetAllocMap := (*C.nvmlGpmMetricsGet_t)(unsafe.Pointer(MetricsGet)), cgoAllocsUnknown
	__ret := C.nvmlGpmMetricsGet(cMetricsGet)
	runtime.KeepAlive(cMetricsGetAllocMap)
	__v := (Return)(__ret)
	return __v
}

// nvmlGpmQueryDeviceSupport function as declared in ixml/api.h:1793
func nvmlGpmQueryDeviceSupport(Device Device, GpmSupport *GpmSupport) Return {
	cDevice, cDeviceAllocMap := *(*C.nvmlDevice_t)(unsafe.Pointer(&Device)), cgoAllocsUnknown
	cGpmSupport, cGpmSupportAllocMap := (*C.nvmlGpmSupport_t)(unsafe.Pointer(GpmSupport)), cgoAllocsUnknown
	__ret := C.nvmlGpmQueryDeviceSupport(cDevice, cGpmSupport)
	runtime.KeepAlive(cGpmSupportAllocMap)
	runtime.KeepAlive(cDeviceAllocMap)
	__v := (Return)(__ret)
	return __v
}

// nvmlGpmSampleFree function as declared in ixml/api.h:1806
func nvmlGpmSampleFree(GpmSample GpmSample) Return {
	cGpmSample, cGpmSampleAllocMap := *(*C.nvmlGpmSample_t)(unsafe.Pointer(&GpmSample)), cgoAllocsUnknown
	__ret := C.nvmlGpmSampleFree(cGpmSample)
	runtime.KeepAlive(cGpmSampleAllocMap)
	__v := (Return)(__ret)
	return __v
}

// nvmlGpmSampleAlloc function as declared in ixml/api.h:1821
func nvmlGpmSampleAlloc(GpmSample *GpmSample) Return {
	cGpmSample, cGpmSampleAllocMap := (*C.nvmlGpmSample_t)(unsafe.Pointer(GpmSample)), cgoAllocsUnknown
	__ret := C.nvmlGpmSampleAlloc(cGpmSample)
	runtime.KeepAlive(cGpmSampleAllocMap)
	__v := (Return)(__ret)
	return __v
}

// nvmlGpmSampleGet function as declared in ixml/api.h:1837
func nvmlGpmSampleGet(Device Device, GpmSample GpmSample) Return {
	cDevice, cDeviceAllocMap := *(*C.nvmlDevice_t)(unsafe.Pointer(&Device)), cgoAllocsUnknown
	cGpmSample, cGpmSampleAllocMap := *(*C.nvmlGpmSample_t)(unsafe.Pointer(&GpmSample)), cgoAllocsUnknown
	__ret := C.nvmlGpmSampleGet(cDevice, cGpmSample)
	runtime.KeepAlive(cGpmSampleAllocMap)
	runtime.KeepAlive(cDeviceAllocMap)
	__v := (Return)(__ret)
	return __v
}

// nvmlDeviceGetPowerManagementLimit function as declared in ixml/api.h:1861
func nvmlDeviceGetPowerManagementLimit(Device Device, Limit *uint32) Return {
	cDevice, cDeviceAllocMap := *(*C.nvmlDevice_t)(unsafe.Pointer(&Device)), cgoAllocsUnknown
	cLimit, cLimitAllocMap := (*C.uint)(unsafe.Pointer(Limit)), cgoAllocsUnknown
	__ret := C.nvmlDeviceGetPowerManagementLimit(cDevice, cLimit)
	runtime.KeepAlive(cLimitAllocMap)
	runtime.KeepAlive(cDeviceAllocMap)
	__v := (Return)(__ret)
	return __v
}

// nvmlDeviceGetPowerManagementLimitConstraints function as declared in ixml/api.h:1884
func nvmlDeviceGetPowerManagementLimitConstraints(Device Device, MinLimit *uint32, MaxLimit *uint32) Return {
	cDevice, cDeviceAllocMap := *(*C.nvmlDevice_t)(unsafe.Pointer(&Device)), cgoAllocsUnknown
	cMinLimit, cMinLimitAllocMap := (*C.uint)(unsafe.Pointer(MinLimit)), cgoAllocsUnknown
	cMaxLimit, cMaxLimitAllocMap := (*C.uint)(unsafe.Pointer(MaxLimit)), cgoAllocsUnknown
	__ret := C.nvmlDeviceGetPowerManagementLimitConstraints(cDevice, cMinLimit, cMaxLimit)
	runtime.KeepAlive(cMaxLimitAllocMap)
	runtime.KeepAlive(cMinLimitAllocMap)
	runtime.KeepAlive(cDeviceAllocMap)
	__v := (Return)(__ret)
	return __v
}

// nvmlDeviceGetPowerManagementDefaultLimit function as declared in ixml/api.h:1906
func nvmlDeviceGetPowerManagementDefaultLimit(Device Device, DefaultLimit *uint32) Return {
	cDevice, cDeviceAllocMap := *(*C.nvmlDevice_t)(unsafe.Pointer(&Device)), cgoAllocsUnknown
	cDefaultLimit, cDefaultLimitAllocMap := (*C.uint)(unsafe.Pointer(DefaultLimit)), cgoAllocsUnknown
	__ret := C.nvmlDeviceGetPowerManagementDefaultLimit(cDevice, cDefaultLimit)
	runtime.KeepAlive(cDefaultLimitAllocMap)
	runtime.KeepAlive(cDeviceAllocMap)
	__v := (Return)(__ret)
	return __v
}

// nvmlDeviceGetCurrentClocksThrottleReasons function as declared in ixml/api.h:1930
func nvmlDeviceGetCurrentClocksThrottleReasons(Device Device, ClocksThrottleReasons *uint64) Return {
	cDevice, cDeviceAllocMap := *(*C.nvmlDevice_t)(unsafe.Pointer(&Device)), cgoAllocsUnknown
	cClocksThrottleReasons, cClocksThrottleReasonsAllocMap := (*C.ulonglong)(unsafe.Pointer(ClocksThrottleReasons)), cgoAllocsUnknown
	__ret := C.nvmlDeviceGetCurrentClocksThrottleReasons(cDevice, cClocksThrottleReasons)
	runtime.KeepAlive(cClocksThrottleReasonsAllocMap)
	runtime.KeepAlive(cDeviceAllocMap)
	__v := (Return)(__ret)
	return __v
}

// nvmlDeviceGetSupportedClocksThrottleReasons function as declared in ixml/api.h:1956
func nvmlDeviceGetSupportedClocksThrottleReasons(Device Device, SupportedClocksThrottleReasons *uint64) Return {
	cDevice, cDeviceAllocMap := *(*C.nvmlDevice_t)(unsafe.Pointer(&Device)), cgoAllocsUnknown
	cSupportedClocksThrottleReasons, cSupportedClocksThrottleReasonsAllocMap := (*C.ulonglong)(unsafe.Pointer(SupportedClocksThrottleReasons)), cgoAllocsUnknown
	__ret := C.nvmlDeviceGetSupportedClocksThrottleReasons(cDevice, cSupportedClocksThrottleReasons)
	runtime.KeepAlive(cSupportedClocksThrottleReasonsAllocMap)
	runtime.KeepAlive(cDeviceAllocMap)
	__v := (Return)(__ret)
	return __v
}

// nvmlDeviceGetTopologyCommonAncestor function as declared in ixml/api.h:1976
func nvmlDeviceGetTopologyCommonAncestor(Device1 Device, Device2 Device, PathInfo *GpuTopologyLevel) Return {
	cDevice1, cDevice1AllocMap := *(*C.nvmlDevice_t)(unsafe.Pointer(&Device1)), cgoAllocsUnknown
	cDevice2, cDevice2AllocMap := *(*C.nvmlDevice_t)(unsafe.Pointer(&Device2)), cgoAllocsUnknown
	cPathInfo, cPathInfoAllocMap := (*C.nvmlGpuTopologyLevel_t)(unsafe.Pointer(PathInfo)), cgoAllocsUnknown
	__ret := C.nvmlDeviceGetTopologyCommonAncestor(cDevice1, cDevice2, cPathInfo)
	runtime.KeepAlive(cPathInfoAllocMap)
	runtime.KeepAlive(cDevice2AllocMap)
	runtime.KeepAlive(cDevice1AllocMap)
	__v := (Return)(__ret)
	return __v
}

// nvmlEventSetCreate function as declared in ixml/api.h:2091
func nvmlEventSetCreate(Set *nvmlEventSet) Return {
	cSet, cSetAllocMap := (*C.nvmlEventSet_t)(unsafe.Pointer(Set)), cgoAllocsUnknown
	__ret := C.nvmlEventSetCreate(cSet)
	runtime.KeepAlive(cSetAllocMap)
	__v := (Return)(__ret)
	return __v
}

// nvmlDeviceRegisterEvents function as declared in ixml/api.h:2131
func nvmlDeviceRegisterEvents(Device Device, EventTypes uint64, Set nvmlEventSet) Return {
	cDevice, cDeviceAllocMap := *(*C.nvmlDevice_t)(unsafe.Pointer(&Device)), cgoAllocsUnknown
	cEventTypes, cEventTypesAllocMap := (C.ulonglong)(EventTypes), cgoAllocsUnknown
	cSet, cSetAllocMap := *(*C.nvmlEventSet_t)(unsafe.Pointer(&Set)), cgoAllocsUnknown
	__ret := C.nvmlDeviceRegisterEvents(cDevice, cEventTypes, cSet)
	runtime.KeepAlive(cSetAllocMap)
	runtime.KeepAlive(cEventTypesAllocMap)
	runtime.KeepAlive(cDeviceAllocMap)
	__v := (Return)(__ret)
	return __v
}

// nvmlDeviceGetSupportedEventTypes function as declared in ixml/api.h:2155
func nvmlDeviceGetSupportedEventTypes(Device Device, EventTypes *uint64) Return {
	cDevice, cDeviceAllocMap := *(*C.nvmlDevice_t)(unsafe.Pointer(&Device)), cgoAllocsUnknown
	cEventTypes, cEventTypesAllocMap := (*C.ulonglong)(unsafe.Pointer(EventTypes)), cgoAllocsUnknown
	__ret := C.nvmlDeviceGetSupportedEventTypes(cDevice, cEventTypes)
	runtime.KeepAlive(cEventTypesAllocMap)
	runtime.KeepAlive(cDeviceAllocMap)
	__v := (Return)(__ret)
	return __v
}

// nvmlEventSetWait function as declared in ixml/api.h:2194
func nvmlEventSetWait(Set nvmlEventSet, Data *nvmlEventData, Timeoutms uint32) Return {
	cSet, cSetAllocMap := *(*C.nvmlEventSet_t)(unsafe.Pointer(&Set)), cgoAllocsUnknown
	cData, cDataAllocMap := (*C.nvmlEventData_t)(unsafe.Pointer(Data)), cgoAllocsUnknown
	cTimeoutms, cTimeoutmsAllocMap := (C.uint)(Timeoutms), cgoAllocsUnknown
	__ret := C.nvmlEventSetWait_v2(cSet, cData, cTimeoutms)
	runtime.KeepAlive(cTimeoutmsAllocMap)
	runtime.KeepAlive(cDataAllocMap)
	runtime.KeepAlive(cSetAllocMap)
	__v := (Return)(__ret)
	return __v
}

// nvmlEventSetFree function as declared in ixml/api.h:2210
func nvmlEventSetFree(Set nvmlEventSet) Return {
	cSet, cSetAllocMap := *(*C.nvmlEventSet_t)(unsafe.Pointer(&Set)), cgoAllocsUnknown
	__ret := C.nvmlEventSetFree(cSet)
	runtime.KeepAlive(cSetAllocMap)
	__v := (Return)(__ret)
	return __v
}

// ixmlDeviceGetBoardPosition function as declared in ixml/api.h:2214
func ixmlDeviceGetBoardPosition(Device Device, Position *uint32) Return {
	cDevice, cDeviceAllocMap := *(*C.nvmlDevice_t)(unsafe.Pointer(&Device)), cgoAllocsUnknown
	cPosition, cPositionAllocMap := (*C.uint)(unsafe.Pointer(Position)), cgoAllocsUnknown
	__ret := C.ixmlDeviceGetBoardPosition(cDevice, cPosition)
	runtime.KeepAlive(cPositionAllocMap)
	runtime.KeepAlive(cDeviceAllocMap)
	__v := (Return)(__ret)
	return __v
}

// ixmlDeviceGetGPUVoltage function as declared in ixml/api.h:2216
func ixmlDeviceGetGPUVoltage(Device Device, Integer *uint32, Decimal *uint32) Return {
	cDevice, cDeviceAllocMap := *(*C.nvmlDevice_t)(unsafe.Pointer(&Device)), cgoAllocsUnknown
	cInteger, cIntegerAllocMap := (*C.uint)(unsafe.Pointer(Integer)), cgoAllocsUnknown
	cDecimal, cDecimalAllocMap := (*C.uint)(unsafe.Pointer(Decimal)), cgoAllocsUnknown
	__ret := C.ixmlDeviceGetGPUVoltage(cDevice, cInteger, cDecimal)
	runtime.KeepAlive(cDecimalAllocMap)
	runtime.KeepAlive(cIntegerAllocMap)
	runtime.KeepAlive(cDeviceAllocMap)
	__v := (Return)(__ret)
	return __v
}

// ixmlDeviceGetEccErros function as declared in ixml/api.h:2218
func ixmlDeviceGetEccErros(Device Device, Single_error *uint32, Double_error *uint32) Return {
	cDevice, cDeviceAllocMap := *(*C.nvmlDevice_t)(unsafe.Pointer(&Device)), cgoAllocsUnknown
	cSingle_error, cSingle_errorAllocMap := (*C.uint)(unsafe.Pointer(Single_error)), cgoAllocsUnknown
	cDouble_error, cDouble_errorAllocMap := (*C.uint)(unsafe.Pointer(Double_error)), cgoAllocsUnknown
	__ret := C.ixmlDeviceGetEccErros(cDevice, cSingle_error, cDouble_error)
	runtime.KeepAlive(cDouble_errorAllocMap)
	runtime.KeepAlive(cSingle_errorAllocMap)
	runtime.KeepAlive(cDeviceAllocMap)
	__v := (Return)(__ret)
	return __v
}

// ixmlDeviceGetHealth function as declared in ixml/api.h:2220
func ixmlDeviceGetHealth(Device Device, Health *uint64) Return {
	cDevice, cDeviceAllocMap := *(*C.nvmlDevice_t)(unsafe.Pointer(&Device)), cgoAllocsUnknown
	cHealth, cHealthAllocMap := (*C.ulonglong)(unsafe.Pointer(Health)), cgoAllocsUnknown
	__ret := C.ixmlDeviceGetHealth(cDevice, cHealth)
	runtime.KeepAlive(cHealthAllocMap)
	runtime.KeepAlive(cDeviceAllocMap)
	__v := (Return)(__ret)
	return __v
}
